/* NOTICE: All materials provided by this project, and materials derived 
 * from the project, are the property of the University of Texas. 
 * Project materials, or those derived from the materials, cannot be placed 
 * into publicly accessible locations on the web. Project materials cannot 
 * be shared with other project teams. Making project materials publicly 
 * accessible, or sharing with other project teams will result in the 
 * failure of the team responsible and any team that uses the shared materials. 
 * Sharing project materials or using shared materials will also result 
 * in the reporting of all team members for academic dishonesty. 
 */
package service;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.sql.DataSource;

import org.junit.Test;

import cs4347.jdbcGame.entity.Game;
import cs4347.jdbcGame.services.GameService;
import cs4347.jdbcGame.services.impl.GameServiceImpl;
import cs4347.jdbcGame.testing.DataSourceManager;
import cs4347.jdbcGame.util.TestingUtil;

public class GameServiceImplTestCase
{
    @Test
    public void testCreate() throws Exception
    {
        DataSource dataSource = DataSourceManager.getDataSource();
        GameService gameService = new GameServiceImpl(dataSource);
        
        Game g1 = buildGame();
        assertNull(g1.getId());
        Game g2 = gameService.create(g1);
        assertNotNull(g2.getId());
    }
    
    @Test
    public void testRetrieve() throws Exception
    {
        DataSource dataSource = DataSourceManager.getDataSource();
        GameService gameService = new GameServiceImpl(dataSource);

        Game g1 = buildGame();
        Game g2 = gameService.create(g1);
        assertNotNull(g2);
        
        Long gameID = g2.getId();
        Game g3 = gameService.retrieve(gameID);
        assertNotNull(g3);
        assertEquals(g2.getTitle(), g3.getTitle());
        assertEquals(g2.getDescription(), g3.getDescription());
        //assertEquals(g2.getReleaseDate(), g3.getReleaseDate());
        assertEquals(g2.getVersion(), g3.getVersion());
    }

    @Test
    public void testRetrieveFail() throws Exception
    {
        DataSource dataSource = DataSourceManager.getDataSource();
        GameService gameService = new GameServiceImpl(dataSource);

        Long gameID = System.currentTimeMillis();
        Game g1 = gameService.retrieve(gameID);
        assertNull(g1);
    }

    @Test
    public void testRetrieveByTitle() throws Exception
    {
        DataSource dataSource = DataSourceManager.getDataSource();
        GameService gameService = new GameServiceImpl(dataSource);

        Long gameID = TestingUtil.getGameID(dataSource);
        Game g1 = gameService.retrieve(gameID);
        String title = g1.getTitle();
        assertNotNull(title);
        
        List<Game> gameList = gameService.retrieveByTitle(title);
        assertTrue(gameList.size() > 0);
        assertEquals(title, gameList.get(0).getTitle());
    }

    SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");

    @Test
    public void testRetrieveByReleaseDate() throws Exception
    {
        DataSource dataSource = DataSourceManager.getDataSource();
        GameService gameService = new GameServiceImpl(dataSource);

        Date startDate = sdf.parse("1/1/2005");
        Date endDate = sdf.parse("1/1/2010");
        
        List<Game> gameList = gameService.retrieveByReleaseDate(startDate, endDate);
        assertNotNull(gameList);
        // Note: This number is tied to the data generated by populateTables. 
        assertEquals(36, gameList.size());
    }
    
    @Test
    public void testUpdate() throws Exception
    {
        DataSource dataSource = DataSourceManager.getDataSource();
        GameService gameService = new GameServiceImpl(dataSource);

        Game g1 = buildGame();
        Game g2 = gameService.create(g1);
        assertNotNull(g2);
        
        g2.setTitle("New Title 123");
        g2.setDescription("New Description 123");
        g2.setReleaseDate(new Date());
        g2.setVersion("1.1.1.1");
        int count = gameService.update(g2);
        assertEquals(1, count);

        Game g3 = gameService.retrieve(g2.getId());
        assertNotNull(g3);
        assertEquals(g2.getTitle(), g3.getTitle());
        assertEquals(g2.getDescription(), g3.getDescription());
        //assertEquals(g2.getReleaseDate(), g3.getReleaseDate());
        assertEquals(g2.getVersion(), g3.getVersion());
    }

    @Test
    public void testDelete() throws Exception
    {
        DataSource dataSource = DataSourceManager.getDataSource();
        GameService gameService = new GameServiceImpl(dataSource);

        Game g1 = buildGame();
        Game g2 = gameService.create(g1);
        assertNotNull(g2);
        assertNotNull(g2.getId());
        
        int count = gameService.delete(g2.getId());
        assertEquals(1, count);
        Game g3 = gameService.retrieve(g2.getId());
        assertNull(g3);
    }

    @Test
    public void testCount() throws Exception
    {
        DataSource dataSource = DataSourceManager.getDataSource();
        GameService gameService = new GameServiceImpl(dataSource);
        
        int count = gameService.count();
        assertTrue(count > 0);
    }

    private Game buildGame()
    {
        Game result = new Game();
        result.setTitle("Test Title");
        result.setDescription("Test Description");
        result.setReleaseDate(new Date());
        result.setVersion("1.2.3");
        return result;
    }}
